doctype html
html
  head
    title Finance
    meta(name='viewport', content='user-scalable=no, width=device-width, initial-scale=1.0, maximum-scale=1.0')
    meta(name='mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-capable', content='yes')
    
    style
      :stylus
        form
          display flex
          flex-flow row wrap
      
        fieldset
          label
            margin 3px 0
            
            //display flex
            //align-items baseline
            //justify-content space-between
            display block
            text-align right
            
            input
              width 70%
              margin-left 5px
              
          button
            display block
            margin-left auto
        
        #dbdump
          
          .del
            color red
            font-weight bold
            cursor pointer
            &::before
              content " X"
  body
    form
      fieldset
        legend Create Account
        label
          | Name
          input#ca-name
        button#ca-btn(type='button') Create
      
      datalist#accts
        option(value='Cash')
        option(value='Savings')
      
      fieldset
        legend Create transaction
        label
          | From
          input#ct-from(list='accts')
        label
          | To
          input#ct-to(list='accts')
        label
          | Amount
          input#ct-amt(type='number')
        button#ct-btn(type='button') Create
      
    pre#dbdump
    
    script(src='pouchdb/pouchdb.min.js')
    script(src='jquery/jquery.min.js')
    script(src='mercury/mercury.js')
    
    script
      :livescript
        {h} = hg = mercury
        
        log = console~log
      
        db = new PouchDB \finance
        
        res <- db.allDocs { +include_docs } .catch log .then
        
        hash = Object.create(null);
        res.rows.forEach (r) !->
          d = r.doc
          hash[d._id] = {
            d._id
            json: JSON.stringify r.doc, null 2
          }
        
        dump-state = hg.varhash hash, hg.struct
        
        del = (s, id) ->
          db.remove id .catch log
          dump-state.delete id
          # TODO: optimistically update local state?
        
        app-state = hg.state {
          dump-state,
          channels: {
            del
          }
        }
        
        hg.app(
          $ \#dbdump .0
          app-state,
          (s) ->
            objs = Object.keys s.dump-state .map ->
              d = s.dump-state[it]
              h \div [
                d.json,
                h \span.del 'ev-click': hg.send s.channels.del, d._id
              ]
            h \div objs
        )
        
        #
        #    $ \<div> .text (JSON.stringify r.doc, null 2) .append ($ \<span> .addClass \del .click -> del r.doc ) .0
        #    $ \#dbdump .empty! .append docs
        #$ \#ca-btn .click !->
        #  db.put {
        #    _id: 'acct-' + $ \#ca-name .val!
        #  }
        #
        #db.changes { +live, since: \now } .on \change dump-db
        