doctype html
html
  head
    title Finance
    meta(name='viewport', content='user-scalable=no, width=device-width, initial-scale=1.0, maximum-scale=1.0')
    meta(name='mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-capable', content='yes')
    
    style
      :stylus
        form
          display flex
          flex-flow row wrap
      
        fieldset
          label
            margin 3px 0
            
            display block
            text-align right
            
            input
              width 70%
              margin-left 5px
              
          button
            display block
            margin-left auto
        
        #dbdump
          
          .del
            color red
            font-weight bold
            cursor pointer
            &::before
              content " X"
  body
    script(src='pouchdb/pouchdb.min.js')
    script(src='jquery/jquery.min.js')
    script(src='underscore/underscore.js')
    script(src='mercury/mercury.js')
    
    script
      :livescript
        {h} = hg = mercury
        log = console~log
        db = new PouchDB \finance
        
        res <- db.allDocs { +include_docs } .catch log .then
        
        acct-add = (s, d) ->
          db.put {
            _id: 'acct-' + $ \#ca-name .val!
          }
          
        acct-del = (s, d) ->
          db.remove d .catch log
          # optimistically update local state?
        
        dump-state = hg.array res.rows.map -> hg.struct it.doc
        
        app-state = hg.state {
          dump-state,
          channels: {
            acct-add,
            acct-del
          }
        }
        
        db.changes { +live, +include_docs, since: \now }
        .on \change (c) ->
          var ind
          oa = dump-state
          oa.some (d, i) ->
            if d._id == c.id
              ind := i
          if c.deleted
            oa.splice ind, 1
          else if ind?
            oa.put ind, hg.struct c.doc
          else
            oa.push c.doc
            
        lbl = (n, c) ->
          h \label [n, h c]
        
        var forms
        hg.app(
          $ \body .0
          app-state,
          (s) ->
            chs = s.channels
            forms ?:= [
            * h \fieldset [
                h \legend 'Create Account'
                lbl 'Name' \input#ca-name
                h \button#ca-btn {
                  type: \button
                  \ev-click : hg.send chs.acct-add
                  } 'Create'
              ]
            * h \fieldset [
                h \legend 'Create transaction'
                lbl 'From' \input#ct-from attributes: list: 'accts'
                lbl 'To' \input#ct-to attributes: list: 'accts'
                lbl 'Amount' \input#ct-amt type: 'number'
                h \button#ct-btn {type:\button} 'Create'
              ]
            ]
            
            h \div [
            * h \form [
                forms
                h \datalist#accts [
                  h \option {value: 'Cash'}
                  h \option {value: 'Savings'}
                ]
              ]
            * h \pre#dbdump (s.dump-state.map ->
                h \div [
                  (JSON.stringify it, null 2),
                  h \span.del 'ev-click': hg.send chs.acct-del, it
                ])
            ]
        )
        